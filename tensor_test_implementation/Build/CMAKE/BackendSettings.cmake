
	
if(NOT DEFINED DEFAULT_BACKEND)
	set(DEFAULT_BACKEND)
	find_package(CUDA QUIET)
	if(CUDA_FOUND)
		set(DEFAULT_BACKEND "CUDA")
	else()
		find_package(TBB QUIET)
		if(TBB_FOUND)
		set(DEFAULT_BACKEND "TBB")
		include_directories(${TBB_INCLUDE_DIRS})
		link_libraries(${TBB_LIBRARY})
		else()
			find_package(OPENMP QUIET)
			if(OPENMP_FOUND)
				set(DEFAULT_BACKEND "OPENMP")
			else()
				set(DEFAULT_BACKEND "CPP_THREAD")
			endif()
		endif()
	endif()
endif()

string(TOUPPER ${DEFAULT_BACKEND} TASKING_BACKEND)

if(${TASKING_BACKEND} STREQUAL "CUDA")
	find_package(CUDA REQUIRED)
	include_directories(${CUDA_INCLUDE_DIRS})
elseif(${TASKING_BACKEND} STREQUAL "TBB")
	find_package(TBB REUIRED)
	include_directories(${TBB_INCLUDE_DIRS})
	link_libraries(${TBB_LIBRARY})
elseif(${TASKING_BACKEND} STREQUAL "OPENMP")
	find_package(OPENMP REQUIRED)
	if(OPENMP_FOUND)
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
		add_definitions(-DTensor_TASKING_OPENMP)
	endif()
elseif(${TASKING_BACKEND} STREQUAL "CPP_THREAD")
else()
	message(FATAL_ERROR "Invalid backend")
endif()
	
